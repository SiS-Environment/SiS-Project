#ifndef SIS_CONTEXT_H
#define SIS_CONTEXT_H

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	includes
//
#include "sis_core_global.h"
#include "sis_buffer.h"
#include "sis_module.h"
#include "sis_result.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace sis {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	class CContext
//
class SIS_CORE_EXPORT CContext
{
public:// Types

public:// Constructor, Destructor
	inline CContext( CBuffer const& oStack );

	~CContext() = default;

public:// Interface Methods
	// Stack
	inline CStack& Stack();
	inline CStack const& Stack() const;

	// ModuleRef
	inline CModuleRef& ModuleRef();
	inline CModuleRef const& ModuleRef() const;

	// Result
	inline IResult* Result();
	inline IResult const* Result() const;
	inline void SetResult(IResult* pResult);

	// PC
	inline offset& PC();
	inline offset GetPC() const;
	inline offset const& PC() const;
	inline void IncrementPC( offset uOffset );

private:// Contents
	CModuleRef m_module;
	IResult* m_result;

	CStack m_stack;
	offset m_PC;
};
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
} // namespace sis
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//#include "sis_context_imp.h"


#endif // SIS_CONTEXT_H
