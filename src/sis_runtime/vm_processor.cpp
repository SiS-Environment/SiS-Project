////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	Includes
//
#include "vm_processor.h"
#include "vm_modulemanager.h"
#include "vm_contextmanager.h"
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace sis {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace vm {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


CProcessor::CProcessor( CModuleManager* pModuleManager )
	: m_pModuleManager( pModuleManager ),
	  m_oContextManager()
{
	if ( nullptr == m_pModuleManager )
		throw - 1;	// TOOD
}



void CProcessor::Run( std::string const& sModuleName )
{
	LoadModule( sModuleName, 0 );
}


void CProcessor::Enter( CModuleRef oModule, CContext* pContext )
{
	offset uOffset = 0;
	IExpression* pExpression = nullptr;
	do
	{
		pExpression = oModule.GetExpression( pContext->GetPC() );
		uOffset = pExression->Eval( pContext );
		pContext = m_oContextManager.Current();
		pContext->IncrementPC( uOffset );
	}
	while ( true );
}


void CProcessor::LoadModule( std::string const& sModuleName, offset uOffset )
{
	CModuleRef oModule = m_pModuleManager->GetModule( sModuleName );

	if ( 0 == uOffset )
		uOffset = oModule->GetEntryPoint();

	CContext* pContext = m_oContextManager.Current();
	pContext->IncrementPC( uOffset );
	try
	{
		Enter( oModule, pContext );
	}
	catch ( LOADMODULE )
	{
		LoadModule( "" );
	}
}




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
} // namespace vm
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
} // namespace sis
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
