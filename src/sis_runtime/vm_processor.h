#ifndef VM_PROCESSOR_H
#define VM_PROCESSOR_H

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	inlcudes
//
#include "vm_runtime_global.h"
#include "vm_contextmanager.h"
#include "sis_context.h"
#include "sis_module.h"
#include "vm_modulemanager.h"
// STL
#include <string>
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace sis {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace vm {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


class IExpression;


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	class CProcessor
//
class CProcessor
{
public:
	// Constructors, destructor
	CProcessor( CModuleManager* pModuleManager );
	~CProcessor() = delete;

	// Copy constructor and assignment operator
	CProcessor( const CProcessor& ) = delete;
	CProcessor& operator=( const CProcessor& ) = delete;

public:
	//	Interface methods
	void Run( std::string const& sModuleName );

	// TODO will be added StepInto, StepOver and StepOut functions for debuging

private:
	void Enter( CModuleRef, CContext* );
	void LoadModule( std::string const& sModuleName, offset uOffset = 0 );

private:
	//
	CModuleManager* m_pModuleManager;
	CContextManager m_oContextManager;

};
//	CController
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
} // namespace vm
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
} // namespace sis
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


#endif // VM_PROCESSOR_H
// end of file
