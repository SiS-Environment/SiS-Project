////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	Includes
//
#include "vm_controller.h"
#include "vm_processor.h"
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace sis {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace vm {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


CController::CController()
{
}


CController::~CController()
{
	while ( !m_arrProcessors.empty() )
	{
		CProcessor* pProcessor = m_arrProcessors.back();
		if ( pProcessor != nullptr )
			delete pProcessor;

		m_arrProcessors.pop_back();
	}
}


CProcessor* CController::CreateProcessor()
{
	CProcessor *pProcessor = new CProcessor;
	m_arrProcessors.push_back( pProcessor );

	return pProcessor;
}


void CController::Start( /*args*/ )
{
	// get entry point
	CProcessor* pProcessor = CreateProcessor();
	// TODO
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
} // namespace vm
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
} // namespace sis
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
