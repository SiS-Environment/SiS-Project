////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	Includes
//
#include "vm_controller.h"
#include "vm_modulemanager.h"
#include "vm_processor.h"
// STL
#include <algorithm>
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace sis {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace vm {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


CController::CController( CModuleManager* pModuleManager )
	: m_pModuleManager( pModuleManager ),
	  m_arrProcessors()
{
	if ( nullptr == m_pModuleManager )
		throw -1; // TODO
}


CController::~CController()
{
	KillAll();
}


CProcessor* CController::CreateProcessor()
{
	CProcessor *pProcessor = new CProcessor( m_pModuleManager );
	m_arrProcessors.push_back( pProcessor ); 

	return pProcessor;
}


void CController::Start( CModuleManager* pModuleManager )
{
	if ( nullptr == pModuleManager )
		throw -1; // TODO

	CModuleRef oModule = pModuleManager->GetStartModule();
	try
	{
		RunNewProcessor( oModule );
	}
	catch ( ... )
	{

	}
}


void CController::RunNewProcessor( CModuleRef oModule )
{
	CProcessor* pProcessor = CreateProcessor();
	try
	{
		pProcessor->Run( oModule );
	}
	catch ( NEWPROC )
	{
		RunNewProcessor( m_pModuleManager->GetModule( NEWPROC->ModuleName ) );
	}
	catch ( ENDPROC )
	{
		KillProcessor( pProcessor );
	}
}


void CController::KillAll()
{
	while ( !m_arrProcessors.empty() )
	{
		CProcessor* pProcessor = m_arrProcessors.back();
		if ( pProcessor != nullptr )
			delete pProcessor;

		m_arrProcessors.pop_back();
	}
}


void CController::KillProcessor( CProcessor* pProcessor )
{
	if ( nullptr == pProcessor )
		return;

	std::vector<CProcessor*>::iterator iter = std::find( m_arrProcessors.begin(), m_arrProcessors.end(), pProcessor );
	if ( m_arrProcessors.end() != iter )
	{
		m_arrProcessors.erase( iter );
		delete pProcessor;
	}
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
} // namespace vm
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
} // namespace sis
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
