#ifndef VM_EVENT_MANAGER_H
#define VM_EVENT_MANAGER_H

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	Includes
//
#include "vm_processorevent.h"
// STL
#include <queue>
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace sis {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace vm {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


class SIS_RUNTIME_EXPORT CProceEventManager
{
public:
	// Constructors and destructor
	CProceEventManager() = default;
	virtual ~CProceEventManager()
	{
		while ( !m_queEvents.empty() )
		{
			CProcEvent* pEvent = m_queEvents.front();
			delete pEvent;
			m_queEvents.pop();
		}
	}

	// Copy constructor and assignment operator
	CProceEventManager( CProceEventManager const& ) = delete;
	CProceEventManager& operator=( CProceEventManager const& ) = delete;

public:
	// Add event to event manager
	void AddEvent( CProcEvent* pEvent )
	{
		if ( nullptr != pEvent )
			m_queEvents.push( pEvent );
	}

protected:
	// Handle events
	virtual void HandleEvents() = 0;

protected:
	// Members
	std::queue<CProcEvent*> m_queEvents;
};


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
} // namespace vm
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
} // namespace sis
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif // VM_EVENT_MANAGER_H
// end of file
 