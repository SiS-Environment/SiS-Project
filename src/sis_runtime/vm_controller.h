#ifndef VM_CONTROLLER_H
#define VM_CONTROLLER_H

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	inlcudes
//
#include "vm_runtime_global.h"
//STL
#include <vector>
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


class CProcessor;


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace sis {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace vm {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	class CController
//
class SIS_RUNTIME_API CController
{
public: // constructors, destructor
	CController();
	~CController();

	// copy constructor and assignment operator
	CController( const CController& ) = delete;
	CController& operator=( const CController& ) = delete;

public: //	interface methods
	void Start( /*args*/ );

private:
	CProcessor* CreateProcessor();

private: // members 
	std::vector<CProcessor*> m_arrProcessors;

};
//	CController
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
} // namespace vm
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
} // namespace sis
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


#endif // VM_CONTROLLER_H
// end of file
