#ifndef VM_CONTROLLER_H
#define VM_CONTROLLER_H

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	Includes
//
#include <sis_module.h>
#include "vm_modulemanager.h"
//STL
#include <vector>
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace sis {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace vm {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class CProcessor;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	class CController
//
class CController
{
public:
	// constructors, destructor
	CController() = default;
	~CController() = default;

	// copy constructor and assignment operator
	CController( CController const& ) = delete;
	CController& operator=( CController const& ) = delete;

public:
	// Interface methods
	void Start( CModuleManager* pModuleManager )
	{
		// TODO

		CModuleRef oModule = pModuleManager->GetStartModule();
		try
		{
			RunNewProcessor( oModule );
		}
		catch ( ... )
		{

		}
	}

	void RunNewProcessor( CModuleRef oModule )
	{
		CProcessor* pProcessor = CreateProcessor();
		try
		{
			pProcessor->Run( oModule );
		}
		catch ( NEWPROC )
		{
			RunNewProcessor( m_pModuleManager->GetModule( NEWPROC->ModuleName ) );
		}
		catch ( ENDPROC )
		{
			// EndProcessor( pProc );
		}
	}

private:
	CProcessor* CreateProcessor();

private:
	// Members 
	CModuleManager* m_pModuleManager;
	std::vector<CProcessor*> m_arrProcessors;

};
//	CController
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
} // namespace vm
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
} // namespace sis
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


#endif // VM_CONTROLLER_H
// end of file
