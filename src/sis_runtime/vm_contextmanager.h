#ifndef VM_CONTEXT_MANAGER_H
#define VM_CONTEXT_MANAGER_H

////////////////////////////////////////////////////////////////////////////
//	includes
//
//#include <cstdlib>
#include <iostream>
#include <stack>
//
////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////
namespace sis {
////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////
namespace vm {
////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////
//
typedef unsigned int uint;
typedef unsigned int t_offset;
//
////////////////////////////////////////////////////////////////////////////
class CBuffer
{
public:
	typedef uint t_size;
	CBuffer( t_size nSize = 0 );
	inline CBuffer( char* pBuffer, uint uSize );
public:
	inline char& operator[]( t_size );
	inline t_size getSize() const;
private:
	char*	m_pBuffer;
	uint	m_uSize;
};

class CStack : public CBuffer
{
	inline CStack( char* pBuffer, uint uSize );

};

class CContext
{
public:
	CContext( CBuffer const& );
private:
	// Members
	t_offset m_PC;
	CStack m_oStack;
};


class CContextManager
{
private:
	//
	//	satic members
	//	
	static const uint s_cuSize; // size of one mb

public:
	// constructor and destructor
	CContextManager();
	~CContextManager();

	CContextManager( const CContextManager& ) = delete;
	CContextManager& operator=(const CContextManager&) = delete;

public:
	CContext* Alloc( uint uStackSize );
	void Free( CContext* );

private:
	//
	//	members
	//
	CBuffer m_oBuffer;
	uint m_uMarker;

};


////////////////////////////////////////////////////////////////////////////////////
} // namespace
////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////
} // namespace sis
////////////////////////////////////////////////////////////////////////////////////


#endif // CONTEXT_MANAGER
