#ifndef CONTEXT_MANAGER
#define CONTEXT_MANAGER

////////////////////////////////////////////////////////////////////////////
//	includes
//
//#include <cstdlib>
#include <iostream>
#include <stack>
#include "vm_buffer.h"
//
////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////
namespace sis {
////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////
namespace vm {
////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////
//
typedef unsigned int uint;
//
////////////////////////////////////////////////////////////////////////////


class CStack : public CBuffer
{
public:
	CStack(){}
	inline CStack( char* pBuffer, uint uSize )
		:m_pStack(pBuffer),m_uSize(uSize)
	{}
private:
	char* m_pStack;
	uint m_uSize;

};


class CContext
{
public:
	CContext( CBuffer const&  oStack)
	{}
private:
	// Members
	uint m_PC;  //offset
	CStack m_oStack;
};



class CContextManager
{
private:
	//
	//	satic members
	//	
	static const uint s_cuSize; // size of one mb

public:
	// constructor and destructor
	CContextManager();
	~CContextManager();
private:
	CContextManager( const CContextManager& );
	CContextManager& operator=(const CContextManager&);

public:
	CContext* Alloc( uint uStackSize );
	void Free( CContext* );

private:
	//
	//	members
	//
	CBuffer m_oBuffer;
	uint m_uMarker;

};


////////////////////////////////////////////////////////////////////////////////////
} // namespace vm
////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////
} // namespace sis
////////////////////////////////////////////////////////////////////////////////////


#endif // CONTEXT_MANAGER